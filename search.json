[{"path":"https://jonathonchow.github.io/AwesomePackage/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 AwesomePackage authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/articles/psd_fit_em.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Fit PSD model by EM algorithm","text":"  use Expectation-Maximization algorithm (EM) fit PSD model (Tang et al. 2005).","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/articles/psd_fit_em.html","id":"psd-model","dir":"Articles","previous_headings":"","what":"PSD model","title":"Fit PSD model by EM algorithm","text":"  typical data set consists genotypes large number \\(J\\) single nucleotide polymorphisms (SNPs) large number \\(\\) unrelated individuals. individuals drawn admixed population contributions \\(K\\) postulated ancestral populations. Population \\(k\\) contributes fraction \\(p_{ik}\\) individual \\(\\)’s genome. Note \\(\\sum_{k=1}^Kp_{ik}=1\\), \\(p_{ik}\\geq 0\\). Allele 1 SNP \\(j\\) frequency \\(f_{kj}\\) population \\(k\\). Note \\(0\\leq f_{kj}\\leq 1\\). matter convention, one can choose allele 1 minor allele alternative allele 2 major allele. model, \\(p_{ik}\\) \\(f_{kj}\\) unknown. primarily interested estimating \\(p_{ik}\\) control ancestry association study, approach also yields estimates \\(f_{kj}\\).   Let \\((g_{ij}^1,g_{ij}^2)\\) represents genotype marker \\(j\\) person \\(\\), \\(g_{ij}^\\) represent observed number copies allele 1 seat \\(\\). Thus, \\((g_{ij}^1,g_{ij}^2)\\) equals \\((1,1)\\), \\((1,0)\\), \\((0,1)\\), \\((0,0)\\) accordingly, \\(\\) genotype 1/1, 1/2, 2/1, 2/2 marker \\(j\\).   Note individuals formed random union gametes. produces binomial proportions \\[P(g_{ij}^=1)=\\sum_{k=1}^Kp_{ik}f_{kj},\\quad P(g_{ij}^=0)=\\sum_{k=1}^Kp_{ik}(1-f_{kj}),\\quad =1,2.\\] Since individuals \\(\\), SNPs \\(j\\), seats \\(\\) considered independent, log-likelihood entire sample \\[\\mathcal{L}(G|P,F)=\\sum_{=1}^\\sum_{j=1}^j\\sum_{=1}^2\\bigg\\{g_{ij}^alog\\Big[\\sum_{k=1}^Kp_{ik}f_{kj}\\Big]+(1-g_{ij}^)log\\Big[\\sum_{k=1}^Kp_{ik}(1-f_{kj})\\Big]\\bigg\\}\\] additive constant enter maximization problem. Let \\(g_{ij}=g_{ij}^1+g_{ij}^2\\). log-likelihood can also expressed \\[\\mathcal{L}(G|P,F)=\\sum_{=1}^\\sum_{j=1}^j\\bigg\\{g_{ij}log\\Big[\\sum_{k=1}^Kp_{ik}f_{kj}\\Big]+(2-g_{ij})log\\Big[\\sum_{k=1}^Kp_{ik}(1-f_{kj})\\Big]\\bigg\\}.\\] parameter matrices \\(P=\\{p_{ik}\\}\\) \\(F=\\{f_{kj}\\}\\) dimensions \\(\\times K\\) \\(K\\times J\\), total \\(K(+J)\\) parameters.   Note log-likelihood invariant permutations labels ancestral populations. Thus, log-likelihood least \\(K!\\) equivalent global maxima. practice, minor nuisance affect convergence well-behaved algorithms. constraints \\(0\\leq f_{kj}\\leq 1\\), \\(p_{ik}\\geq 0\\), \\(\\sum_{k=1}^Kp_{ik}=1\\) significant hindrances contriving good optimization algorithm.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/articles/psd_fit_em.html","id":"expectation-maximization-algorithm","dir":"Articles","previous_headings":"","what":"Expectation-Maximization algorithm","title":"Fit PSD model by EM algorithm","text":"  goal solve MLE problem observed variable \\(x\\) \\[\\theta_{MLE}=\\mathop{argmax}\\limits_{\\theta}log P(x|\\theta).\\] However, probabilistic model contains observed variable \\(x\\) latent variable \\(z\\), MLE often find analytical solution directly. EM algorithm provides way solve MLE iteratively.   first thing notice \\[log P(x|\\theta) = log P(x,z|\\theta)-log P(z|x,\\theta) = log \\frac{P(x,z|\\theta)}{Q(z)} - log \\frac{P(x|z,\\theta)}{Q(z)},\\] \\(Q(z)\\) undetermined distribution.   take expectation sides equation, \\[\\mathbb{E}_{Q(z)} \\Big[LHS\\Big] = \\int_{z}log P(x|\\theta)Q(z)dz = log P(x|\\theta)\\int_{z}Q(z)dz = log P(x|\\theta),\\] \\[\\mathbb{E}_{Q(z)} \\Big[RHS\\Big] = \\int_{z}log \\frac{P(x,z|\\theta)}{Q(z)}Q(z)dz - \\int_{z}log \\frac{P(x|z,\\theta)}{Q(z)}Q(z)dz := \\mathcal{L}(Q(z),\\theta) - KL(Q(z)\\|P(z|x,\\theta)).\\] Hence, \\[log P(x|\\theta)=\\mathcal{L}(Q(z),\\theta) - KL(Q(z)\\|P(z|x,\\theta)).\\]   use property KL divergence \\(KL(Q\\|P)\\geq 0\\), equality holds \\(Q=P\\). Thus, \\[log P(x|\\theta)\\geq \\mathcal{L}(Q(z),\\theta),\\] Therefore, also refer \\(\\mathcal{L}(Q(z),\\theta)\\) evidence lower bound (ELBO).   condition \\(\\)th iteration, first fix parameter \\(\\theta^{()}\\), take \\(Q(z)=P(z|x,\\theta)\\), \\(log P(x|\\theta^{()})=\\mathcal{L}(Q(z),\\theta)\\), E-step. Next, change parameter \\(\\theta\\), maximize ELBO, get parameter \\(\\theta^{(+1)}\\) \\((+1)\\)th iteration, M-step. Finally, simplification can carried obtain EM algorithm.   precisely, \\[\\begin{split} &\\theta^{(+1)}\\\\ =& \\mathop{argmax}\\limits_{\\theta}\\mathcal{L}(Q(z),\\theta) \\\\ =& \\mathop{argmax}\\limits_{\\theta}\\int_{z}log \\frac{P(x,z|\\theta)}{Q(z)}Q(z)dz \\\\ =& \\mathop{argmax}\\limits_{\\theta}\\int_{z}log \\frac{P(x,z|\\theta)}{P(z|x,\\theta^{()})}P(z|x,\\theta^{()})dz \\\\ =& \\mathop{argmax}\\limits_{\\theta}\\int_{z}log P(x,z|\\theta)P(z|x,\\theta^{()})dz - \\int_{z}log P(z|x,\\theta^{()})P(z|x,\\theta^{()})dz \\\\ =& \\mathop{argmax}\\limits_{\\theta}\\int_{z}log P(x,z|\\theta)P(z|x,\\theta^{()})dz \\\\ =& \\mathbb{E}_{P(z|x,\\theta^{()})}\\Big[log P(x,z|\\theta)\\Big]. \\end{split}\\]   conclusion, E-step, compute expectation \\[\\mathbb{E}_{P(z|x,\\theta^{()})}\\Big[log P(x,z|\\theta)\\Big]=\\int_{z}log P(x,z|\\theta)P(z|x,\\theta^{()})dz,\\] M-step, compute maximization update parameters \\[\\theta^{(+1)}=\\mathop{argmax}\\limits_{\\theta}\\mathbb{E}_{P(z|x,\\theta^{()})}\\Big[log P(x,z|\\theta)\\Big],\\] log-likelihood incomplete data converges. EM algorithm.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/articles/psd_fit_em.html","id":"fit-psd-model-by-em-algorithm","dir":"Articles","previous_headings":"","what":"Fit PSD model by EM algorithm","title":"Fit PSD model by EM algorithm","text":"  derive EM algorithm PSD model. observed variable \\(G=\\{(g_{ij}^1,g_{ij}^2)\\}_{\\times J}\\). model parameters \\(P=\\{p_{ik}\\}_{\\times K}\\) \\(F=\\{f_{kj}\\}_{K\\times J}\\). latent variable \\(Z=\\{z_{ij}^1,z_{ij}^2\\}_{\\times J}\\), \\(z_{ij}^\\) element set \\(\\{1,\\ldots,K\\}\\), denotes population genes individual \\(\\) marker \\(j\\) position \\(\\) really come.   Consider log-likelihood complete data \\[\\begin{split} &log P(G,Z|P,F)\\\\ =&log P(G|Z,P,F) + log P(Z|P,F) \\\\ =&\\sum_{=1}^\\sum_{j=1}^J\\sum_{k=1}^K\\sum_{=1}^2\\bigg\\{1(z_{ij}^=k)\\Big[g_{ij}^alogf_{kj}+(2-g_{ij}^)log(1-f_{kj})\\Big]+1(z_{ij}^=k)logp_{ik}\\bigg\\}. \\end{split}\\]   E-step. Using linear property expectations, expectation \\(t\\)th iteration \\[\\begin{split} &\\mathbb{E}_{P(Z|G,P^{(t)},F^{(t)})}\\Big[log P(G,Z|P,F)\\Big]\\\\=&\\sum_{=1}^\\sum_{j=1}^J\\sum_{k=1}^K\\sum_{=1}^2\\bigg\\{P(z_{ij}^=k|G,P^{(t)},F^{(t)})\\Big[g_{ij}^alogf_{kj}+(2-g_{ij}^)log(1-f_{kj})+logp_{ik}\\Big]\\bigg\\}. \\end{split}\\] Using Bayesian formula, \\[\\begin{split} &P(z_{ij}^=k|G,P^{(t)},F^{(t)})\\\\ =& P(z_{ij}^=k|g_{ij}^,p_{ik}^{(t)},f_{kj}^{(t)})\\\\ =& \\frac{P(g_{ij}^|z_{ij}^=k,p_{ik}^{(t)},f_{kj}^{(t)})P(z_{ij}^=k|p_{ik}^{(t)},f_{kj}^{(t)})}{\\sum_{k=1}^KP(g_{ij}^|z_{ij}^=k,p_{ik}^{(t)},f_{kj}^{(t)})P(z_{ij}^=k|p_{ik}^{(t)},f_{kj}^{(t)})}\\\\ =& \\frac{p_{ik}^{(t)}(f_{kj}^{(t)})^{g_{ij}^}(1-f_{kj}^{(t)})^{(1-g_{ij}^)}}{\\sum_{k=1}^Kp_{ik}^{(t)}(f_{kj}^{(t)})^{g_{ij}^}(1-f_{kj}^{(t)})^{(1-g_{ij}^)}}.\\end{split}\\]   Next, note \\[p_{ik}^{(t)}(f_{kj}^{(t)})^{g_{ij}^}(1-f_{kj}^{(t)})^{(1-g_{ij}^)}= \\left\\{ \\begin{aligned} &p_{ik}^{(t)}f_{kj}^{(t)},&\\quad &g_{ij}^=1\\\\ &p_{ik}^{(t)}(1-f_{kj}^{(t)}),&\\quad &g_{ij}^=0. \\end{aligned} \\right. \\] Thus, \\[ P(z_{ij}^=k|G,P^{(t)},F^{(t)})= \\left\\{ \\begin{aligned} &\\frac{p_{ik}^{(t)}f_{kj}^{(t)}}{\\sum_{k=1}^Kp_{ik}^{(t)}f_{kj}^{(t)}}:=a_{ijk}^{(t)},&\\quad &g_{ij}^=1\\\\ &\\frac{p_{ik}^{(t)}(1-f_{kj}^{(t)})}{\\sum_{k=1}^Kp_{ik}^{(t)}(1-f_{kj}^{(t)})}:=b_{ijk}^{(t)},&\\quad &g_{ij}^=0. \\end{aligned} \\right. \\]   M-step. Calculate parameters \\((t+1)\\)th iteration. problem transformed solving optimization problem \\[\\begin{split} \\mathop{max}\\limits_{P,F} & \\quad \\mathbb{E}_{P(Z|G,P^{(t)},F^{(t)})}\\Big[log P(G,Z|P,F)\\Big]\\\\ s.t. & \\quad \\sum_{k=1}^Kp_{ik}=1,\\quad =1,\\ldots,. \\end{split}\\] Using Lagrange multiplier method, define  \\(\\mathcal{L}\\) \\[\\mathcal{L} = \\mathbb{E}_{P(Z|G,P^{(t)},F^{(t)})}\\Big[log P(G,Z|P,F)\\Big] + \\sum_{=1}^\\tau_i\\Big(1-\\sum_{k=1}^Kp_{ik}\\Big).\\] Take partial derivatives \\(p_{ik}\\) \\(f_{kj}\\) set equal zero \\[\\frac{1}{p_{ik}}\\sum_{j=1}^J\\sum_{=1}^2P(z_{ij}^=k|G,P^{(t)},F^{(t)})-\\tau_i=0,\\quad =1,\\ldots,,\\quad k=1,\\ldots,K,\\] \\[\\sum_{=1}^\\sum_{=1}^2P(z^a_{ij}=k|G,P^{(t)},F^{(t)})\\Big[g_{ij}^\\frac{1}{f_{kj}}+(1-g_{ij}^)\\frac{1}{1-f_{kj}}\\Big]=0,\\quad j=1,\\ldots,J,\\quad k=1,\\ldots,K.\\]   sum first equality k, \\[\\frac{1}{\\tau_i}\\sum_{k=1}^K\\sum_{j=1}^J\\sum_{=1}^2P(z_{ij}^=k|G,P^{(t)},F^{(t)})=\\sum_{k=1}^Kp_{ik}=1,\\quad =1,\\ldots,.\\] Thus, Lagrange multiplier \\[\\tau_i=\\sum_{j=1}^J\\sum_{=1}^2\\sum_{k=1}^KP(z_{ij}^=k|G,P^{(t)},F^{(t)})=\\sum_{j=1}^J\\sum_{=1}^21=2J,\\quad =1,\\ldots,.\\]   Thus, obtain parameter update formula \\((t+1)\\)th iteration \\[\\begin{split} &p_{ik}^{(t+1)}\\\\ =&\\frac{\\sum_{j=1}^J\\sum_{=1}^2g_{ij}^aP(z_{ij}^=k|G,P^{(t)},F^{(t)})+\\sum_{j=1}^J\\sum_{=1}^2(1-g_{ij}^)P(z_{ij}^=k|G,P^{(t)},F^{(t)})}{2J}\\\\ =&\\frac{\\sum_{j=1}^J\\sum_{=1}^2P(z_{ij}^=k|G,P^{(t)},F^{(t)})}{2J},\\quad =1,\\ldots,,\\quad k=1,\\ldots,K, \\end{split}\\] \\[\\begin{split} &f_{kj}^{(t+1)}\\\\ =& \\frac{\\sum_{=1}^\\sum_{=1}^2g_{ij}^aP(z_{ij}^=k|G,P^{(t)},F^{(t)})}{\\sum_{=1}^\\sum_{=1}^2g_{ij}^aP(z_{ij}^=k|G,P^{(t)},F^{(t)})+\\sum_{=1}^\\sum_{=1}^2(1-g_{ij}^)P(z_{ij}^=k|G,P^{(t)},F^{(t)})}\\\\ =&\\frac{\\sum_{=1}^\\sum_{=1}^2g_{ij}^aP(z_{ij}^=k|G,P^{(t)},F^{(t)})}{\\sum_{=1}^\\sum_{=1}^2P(z_{ij}^=k|G,P^{(t)},F^{(t)})},\\quad j=1,\\ldots,J,\\quad k=1,\\ldots,K. \\end{split}\\]   Finally, Using expression \\(P(z_{ij}^=k|G,P^{(t)},F^{(t)})\\), can get \\[\\sum_{=1}^2g_{ij}^aP(z_{ij}^=k|G,P^{(t)},F^{(t)})= \\left\\{ \\begin{aligned} &2a_{ijk}^{(t)},&(g_{ij}^1,g_{ij}^2)=(1,1)\\\\ &a_{ijk}^{(t)},&(g_{ij}^1,g_{ij}^2)=(1,0)\\\\ &a_{ijk}^{(t)},&(g_{ij}^1,g_{ij}^2)=(0,1)\\\\ &0,&(g_{ij}^1,g_{ij}^2)=(0,0) \\end{aligned} \\right. =\\Big(\\sum_{=1}^2g_{ij}^\\Big)a_{ijk}^{(t)}=g_{ij}a_{ijk}^{(t)},\\] \\[\\sum_{=1}^2(1-g_{ij}^)P(z_{ij}^=k|G,P^{(t)},F^{(t)})= \\left\\{ \\begin{aligned} &0,&(g_{ij}^1,g_{ij}^2)=(1,1)\\\\ &b_{ijk}^{(t)},&(g_{ij}^1,g_{ij}^2)=(1,0)\\\\ &b_{ijk}^{(t)},&(g_{ij}^1,g_{ij}^2)=(0,1)\\\\ &2b_{ijk}^{(t)},&(g_{ij}^1,g_{ij}^2)=(0,0) \\end{aligned} \\right. =\\Big[\\sum_{=1}^2(1-g_{ij}^)\\Big]b_{ijk}^{(t)}=(2-g_{ij})b_{ijk}^{(t)}.\\] parameter update formula can written \\[p_{ik}^{(t+1)}=\\frac{\\sum_{j=1}^Jg_{ij}a_{ijk}^{(t)}+\\sum_{j=1}^J(2-g_{ij})b_{ijk}^{(t)}}{2J},\\quad =1,\\ldots,,\\quad k=1,\\ldots,K,\\] \\[f_{kj}^{(t+1)}\\frac{\\sum_{=1}^Ig_{ij}a_{ijk}^{(t)}}{\\sum_{=1}^Ig_{ij}a_{ijk}^{(t)}+\\sum_{=1}^(2-g_{ij})b_{ijk}^{(t)}},\\quad j=1,\\ldots,J,\\quad k=1,\\ldots,K.\\]   conclusion, E-step, compute expectation \\(a_{ijk}\\) \\(b_{ijk}\\), M-step, compute maximization update parameters \\(p_{ik}\\) \\(f_{kj}\\), log-likelihood incomplete data \\(\\mathcal{L}(G|P,F)\\) converges. EM algorithm PSD model.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/articles/psd_fit_em.html","id":"acceleration","dir":"Articles","previous_headings":"","what":"Acceleration","title":"Fit PSD model by EM algorithm","text":"  can speed EM algorithm two ways. first code level. write core parameter update part C++; second algorithm level, can use SQUAREM accelerate algorithm.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/articles/psd_fit_em.html","id":"algorithm-implementation","dir":"Articles","previous_headings":"","what":"Algorithm Implementation","title":"Fit PSD model by EM algorithm","text":"  present implementation EM algorithm R package AwesomePackage. can fit PSD model using EM algorithm using function psd_fit_em. time, can use plot_loss see changes log-likelihood plot_structure plot structure.   example.     See AwesomePackage details.","code":"library(AwesomePackage) G <- matrix(c(0,0,1, 0,2,1, 1,0,1, 0,1,0, 1,0,0), 3, 5) result <- psd_fit_em(G, 2, 1e-5, 50) result ## $P ##              [,1]         [,2] ## [1,] 9.999978e-01 2.189409e-06 ## [2,] 3.349816e-15 1.000000e+00 ## [3,] 6.891854e-01 3.108146e-01 ##  ## $F ##              [,1]         [,2]         [,3]      [,4]          [,5] ## [1,] 2.765494e-01 3.541879e-08 5.737398e-01 0.0000000  3.116915e-01 ## [2,] 9.783378e-12 1.000000e+00 2.638940e-26 0.4135045 1.207428e-144 ##  ## $Loss ## [1] -0.7177749 -0.7081721 -0.7074815 -0.7074290 -0.7074250 ##  ## $Iterations ## [1] 50 L <- result$Loss plot_loss(list(L), \"em\", 10) P <- result$P plot_structure(P)"},{"path":[]},{"path":"https://jonathonchow.github.io/AwesomePackage/articles/quick_start.html","id":"psd-model-and-data","dir":"Articles","previous_headings":"Fit PSD model","what":"PSD model and data","title":"AwesomePackage: Quick start","text":"consider sample data 1000 Genomes Project (TGP) use PSD model fit data. import pre-trained results directly.","code":"load(system.file(\"extdata\", \"result_fit_psd.RData\", package = \"AwesomePackage\", mustWork = TRUE))"},{"path":"https://jonathonchow.github.io/AwesomePackage/articles/quick_start.html","id":"fit-psd-model-by-em-algorithm","dir":"Articles","previous_headings":"Fit PSD model","what":"Fit PSD model by EM algorithm","title":"AwesomePackage: Quick start","text":"fit PSD model EM algorithm, use loss function stopping criterion. EM algorithm converges slowly. takes 450 EM iterations reach predetermined accuracy. plot loss function number iterations using package ggplot2, loss function records 10 iterations.  plot ancestral proportions individuals using package ggplot2. fitting result EM algorithm accurate.  measure prediction accuracy dataset maximum likelihood function deviance residuals.","code":"result_TGP_em <- psd_fit_em(data_TGP, 3, 1e-5, 500) # [=========================================================>------] 450/500 ( 3m) L <- result_TGP_em$Loss plot_loss(list(L), \"em\", 10) P <- result_TGP_em$P plot_structure(P) L[length(L)] ## [1] -0.5971432 psd_error(data_TGP, result_TGP_em) ## [1] 0.3374755"},{"path":"https://jonathonchow.github.io/AwesomePackage/articles/quick_start.html","id":"fit-psd-model-by-sqp-algorithm","dir":"Articles","previous_headings":"Fit PSD model","what":"Fit PSD model by SQP algorithm","title":"AwesomePackage: Quick start","text":"fit PSD model SQP algorithm, use loss function stopping criterion. Although SQP algorithm converges fast, easy converge local optimal value. prevent bad scenario, start 100 EM iterations, need 40 SQP iterations reach accuracy requirement. plot loss function number iterations using package ggplot2, loss function records 10 iterations.  plot ancestral proportions individuals using package ggplot2. Notice fitting result SQP algorithm excellent.  measure prediction accuracy dataset maximum likelihood function deviance residuals.","code":"result_TGP_sqp <- psd_fit_sqp(data_TGP, 3, 1e-5, 50, 100) # [================================================================] 100/100 (35s) # [====================================================>-------------] 40/50 ( 1m) L <- result_TGP_sqp$Loss plot_loss(list(L), \"em & sqp\", 10) P <- result_TGP_sqp$P plot_structure(P) L[length(L)] ## [1] -0.5969287 psd_error(data_TGP, result_TGP_sqp) ## [1] 0.3372611"},{"path":"https://jonathonchow.github.io/AwesomePackage/articles/quick_start.html","id":"fit-psd-model-by-vi-algorithm","dir":"Articles","previous_headings":"Fit PSD model","what":"Fit PSD model by VI algorithm","title":"AwesomePackage: Quick start","text":"fit PSD model VI algorithm, use loss function stopping criterion. Similar EM algorithm, convergence VI algorithm also relatively slow, 490 iterations needed reach accuracy requirement. plot loss function number iterations using package ggplot2, loss function records 10 iterations.  plot ancestral proportions individuals using package ggplot2. fitting result much better EM algorithm.  measure prediction accuracy dataset evidence lower bound (ELBO), maximum likelihood function deviance residuals.","code":"result_TGP_vi <- psd_fit_vi(data_TGP, 3, 1e-5, 500) # [==============================================================>-] 490/500 ( 2m) L <- result_TGP_vi$Loss plot_loss(list(L), \"vi\", 10) P <- result_TGP_vi$P plot_structure(P) L[length(L)] ## [1] -0.6103088 psd_loglikelihood(data_TGP, result_TGP_vi) ## [1] -0.59751 psd_error(data_TGP, result_TGP_vi) ## [1] 0.3378423"},{"path":"https://jonathonchow.github.io/AwesomePackage/articles/quick_start.html","id":"fit-psd-model-by-svi-algorithm","dir":"Articles","previous_headings":"Fit PSD model","what":"Fit PSD model by SVI algorithm","title":"AwesomePackage: Quick start","text":"fit PSD model SVI algorithm, use loss function stopping criterion. completed fitting 13 min, little longer previous three algorithms. Although SVI algorithm known fast speed, dataset large number individuals (). can predicted complete TGP data, SVI algorithm still needs time, time algorithms greatly increased. Perhaps time algorithms similar data similar TGP data size, number individuals () large, performance SVI algorithm much better, also superiority SVI algorithm. plot loss function number iterations using package ggplot2, loss function records 10,000 iterations. natural thing use change loss function stopping criterion, can seen , loss function validation set necessarily monotonic. sampling interval large, loss function oscillate near optimal value, cycle finished. sampling interval small, loss function almost constant, resulting premature exit loop. However, proper sampling intervals difficult find. simply added maximum number iterations (case, 50,000) stopping criterion, loss function used post-hoc metric.  plot ancestral proportions individuals using package ggplot2. convergence accuracy SVI algorithm also good.  measure prediction accuracy dataset maximum likelihood function validation set.","code":"result_TGP_svi <- psd_fit_svi(data_TGP, 3,                               1e-5, 5e+5, 1e+4, 3,                               100, 2000,                               5e-2, 1e-1,                               1, 0.5) # [============>----------------------------------------------] 110000/5e+05 (13m) L <- result_TGP_svi$Loss plot_loss(list(L), \"svi\", 1e+4) P <- result_TGP_svi$P plot_structure(P) result_TGP_svi$MaxLoss ## [1] -0.614379"},{"path":"https://jonathonchow.github.io/AwesomePackage/articles/quick_start.html","id":"structure-plot","dir":"Articles","previous_headings":"","what":"Structure plot","title":"AwesomePackage: Quick start","text":"analyze structure diagrams four algorithms TGP HGDP. import pre-trained results directly.","code":"load(system.file(\"extdata\", \"result_structure_plot.RData\", package = \"AwesomePackage\", mustWork = TRUE))"},{"path":"https://jonathonchow.github.io/AwesomePackage/articles/quick_start.html","id":"tgp","dir":"Articles","previous_headings":"Structure plot","what":"TGP","title":"AwesomePackage: Quick start","text":"Large populations.  Small populations.","code":"result_TGP <- psd_fit_vi(data_TGP, 4, 1e-5, 2000) # [=========================>-------------------------------------] 840/2000 ( 4m) P <- result_TGP$P label <- rownames(data_TGP) lpop <- unlist(map_TGP[1]) spop <- unlist(map_TGP[2]) indiv <- unlist(map_TGP[3]) plot_structure(P, label = label, map.indiv = indiv, map.pop = lpop, gap = 5) plot_structure(P, label = label, map.indiv = indiv, map.pop = spop, gap = 5)"},{"path":"https://jonathonchow.github.io/AwesomePackage/articles/quick_start.html","id":"hgdp","dir":"Articles","previous_headings":"Structure plot","what":"HGDP","title":"AwesomePackage: Quick start","text":"Large populations.  Small populations.","code":"result_HGDP <- psd_fit_vi(data_HGDP, 7, 1e-5, 2000) # [=============================>---------------------------------] 940/2000 ( 5m) P <- result_HGDP$P label <- rownames(data_HGDP) lpop <- unlist(map_HGDP[1]) spop <- unlist(map_HGDP[2]) indiv <- unlist(map_HGDP[3]) plot_structure(P, label = label, map.indiv = indiv, map.pop = lpop, gap = 5) plot_structure(P, label = label, map.indiv = indiv, map.pop = spop, gap = 5, font.size = 5)"},{"path":"https://jonathonchow.github.io/AwesomePackage/articles/quick_start.html","id":"choose-hyper-parameter-k","dir":"Articles","previous_headings":"","what":"Choose hyper-parameter K","title":"AwesomePackage: Quick start","text":"fit different hyperparameters K respectively, select K makes indices optimal. conduct experiments TPG HGDP datasets different algorithms separately. See Articles AwesomePackage details.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jonathon Chow. Author, maintainer.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chow J (2022). AwesomePackage: Infer ancestry models fit models algorithms. https://github.com/JONATHONCHOW/AwesomePackage, https://jonathonchow.github.io/AwesomePackage/.","code":"@Manual{,   title = {AwesomePackage: Infer ancestry with some models and fit those models with some algorithms},   author = {Jonathon Chow},   year = {2022},   note = {https://github.com/JONATHONCHOW/AwesomePackage, https://jonathonchow.github.io/AwesomePackage/}, }"},{"path":"https://jonathonchow.github.io/AwesomePackage/index.html","id":"awesomepackage","dir":"","previous_headings":"","what":"Infer ancestry with some models and fit those models with some algorithms","title":"Infer ancestry with some models and fit those models with some algorithms","text":"goal AwesomePackage infer ancestry models fit models algorithms. use classical PSD model ancestor inference, widely used, STRUCTURE (Pritchard et al. 2000, MCMC), FRAPPE (Tang et al. 2005, EM), ADMIXTURE (Alexander et al. 2009, SQP), fastSTRUCTURE (Raj et al. 2014, VI), TeraStructure (Gopalan et al. 2017, SVI). illustrate close relationship PSD model, Poisson NMF model, multinomial topic model LDA model, can optimize algorithm. use Expectation-Maximization algorithm (EM), sequential quadratic programming algorithm (SQP), variational inference algorithm (VI) stochastic variational inference algorithm (SVI) fit model, illustrate relationships differences algorithms simulation experiments real data experiments.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Infer ancestry with some models and fit those models with some algorithms","text":"can install development version AwesomePackage GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"JONATHONCHOW/AwesomePackage\")"},{"path":"https://jonathonchow.github.io/AwesomePackage/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Infer ancestry with some models and fit those models with some algorithms","text":"can check theories examples Articles AwesomePackage.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"Infer ancestry with some models and fit those models with some algorithms","text":"can use following code see AwesomePackage successfully installed. can refer Reference AwesomePackage use functions, can fun ancestry inference!","code":"library(AwesomePackage) hello_world() #> [1] \"Data science is fantastic!\""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/data_HGDP.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data from the Human Genome Diversity Project — data_HGDP","title":"Sample data from the Human Genome Diversity Project — data_HGDP","text":"group scientists Stanford University collaborated large study understand genetic diversity human populations. analyzed genomic DNA 1,043 individuals around world, determining genotypes 650,000 SNP loci, Illumina BeadStation technology. Genomic DNA samples fully-consenting individuals collected Human Genome Diversity Project (HGDP), collaboration Centre Etude Polymorphism Humain (CEPH) Paris. collection tested referred \"HGDP-CEPH Human Genome Diversity Cell Line Panel\". represent 51 different populations Africa, Europe, Middle East, South Central Asia, East Asia, Oceania Americas.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/data_HGDP.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data from the Human Genome Diversity Project — data_HGDP","text":"data_HGDP 942 x 50000 matrix.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/data_HGDP.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data from the Human Genome Diversity Project — data_HGDP","text":"https://www.hagsc.org/hgdp/","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/data_TGP.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data from the 1000 Genomes Project — data_TGP","title":"Sample data from the 1000 Genomes Project — data_TGP","text":"1000 Genomes Project (TGP) created catalogue common human genetic variation, using openly consented samples people declared healthy. reference data resources generated project remain heavily used biomedical science community. International Genome Sample Resource (IGSR) maintains shares human genetic variation resources built 1000 Genomes Project. also update resources current reference assembly, add new data sets generated 1000 Genomes Project samples add data projects working openly consented samples.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/data_TGP.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data from the 1000 Genomes Project — data_TGP","text":"data_TGP 1092 x 50000 matrix.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/data_TGP.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data from the 1000 Genomes Project — data_TGP","text":"https://www.internationalgenome.org/","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/hello_world.html","id":null,"dir":"Reference","previous_headings":"","what":"Hello world — hello_world","title":"Hello world — hello_world","text":"Hello world add \"AwesomePackage\" NAMESPACE.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/hello_world.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hello world — hello_world","text":"","code":"hello_world()"},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/hello_world.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hello world — hello_world","text":"string \"Data science fantastic!\".","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/hello_world.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hello world — hello_world","text":"","code":"hello_world() #> [1] \"Data science is fantastic!\""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/map_HGDP.html","id":null,"dir":"Reference","previous_headings":"","what":"Corresponding tables for individuals and populations of the HGDP dataset — map_HGDP","title":"Corresponding tables for individuals and populations of the HGDP dataset — map_HGDP","text":"map_HGDP gives corresponding relationship among individuals, small populations large populations. plot_structure uses relationship group data draw structure plot.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/map_HGDP.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Corresponding tables for individuals and populations of the HGDP dataset — map_HGDP","text":"map_HGDP table three columns. Superpop Large populations, Asians, Africans, Europeans. Pop Small populations, Chinese, British, Norwegian. Indiv Individuals.","code":""},{"path":[]},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/map_TGP.html","id":null,"dir":"Reference","previous_headings":"","what":"Corresponding tables for individuals and populations of the TGP dataset — map_TGP","title":"Corresponding tables for individuals and populations of the TGP dataset — map_TGP","text":"map_TGP gives corresponding relationship among individuals, small populations large populations. plot_structure uses relationship group data draw structure plot.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/map_TGP.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Corresponding tables for individuals and populations of the TGP dataset — map_TGP","text":"map_TGP table three columns. Superpop Large populations, Asians, Africans, Europeans. Pop Small populations, Chinese, British, Norwegian. Indiv Individuals.","code":""},{"path":[]},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/plot_index_vs_K.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the relationship between index and K — plot_index_vs_K","title":"Plot the relationship between index and K — plot_index_vs_K","text":"Draw diagram relationship index K using package ggplot2. index can loglikelihood, error, ELBO, time.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/plot_index_vs_K.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the relationship between index and K — plot_index_vs_K","text":"","code":"plot_index_vs_K(   L,   methods,   index.id = c(\"loglik\", \"error\", \"elbo\", \"time\"),   start.point = 2,   epsilon = 0.01,   colors = c(\"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\"),   linetypes = \"solid\",   linesizes = 0.5,   shapes = 19,   fills = \"white\",   theme = function() theme_cowplot(12) )"},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/plot_index_vs_K.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the relationship between index and K — plot_index_vs_K","text":"L list element vector index respect K. methods vector length L element name fitting algorithm, \"em\", \"sqp\", \"vi\", \"svi\". index.id Choose index. one \"loglik\", \"error\", \"elbo\", \"time\". start.point initial point K. epsilon small, positive number added vertical axis logarithmic scale -emphasize small differences. colors colors used draw curves. linetypes line types used draw curves. linesizes line sizes used draw curves. shapes shapes used draw points. fills fill colors used draw points. theme ggplot2 theme.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/plot_index_vs_K.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the relationship between index and K — plot_index_vs_K","text":"ggplot object.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/plot_index_vs_K.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the relationship between index and K — plot_index_vs_K","text":"","code":"L <- list(c(-100,-20,-10,-1,-0.5,-0.3,-0.1), c(-30,-5,-1,-0.1,-0.05)) plot_index_vs_K(L, c(\"fun\",\"more fun\"), index.id = \"loglik\")  L <- list(c(0.1,0.5,0.8,1.2), c(1.6,0.2,0.8,2.5,3.7)) plot_index_vs_K(L, c(\"fun\",\"more fun\"), index.id = \"error\")  L <- list(c(-100,-10,-1,-0.5,-0.1), c(-5,-1,-0.1,-0.05)) plot_index_vs_K(L, c(\"fun\",\"more fun\"), index.id = \"elbo\")  L <- list(c(10,15,20), c(12,18,30,32)) plot_index_vs_K(L, c(\"fun\",\"more fun\"), index.id = \"time\")"},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/plot_loss.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the loss function — plot_loss","title":"Plot the loss function — plot_loss","text":"Plot loss function number iterations using package ggplot2.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/plot_loss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the loss function — plot_loss","text":"","code":"plot_loss(   L,   methods,   sample.rate,   epsilon = 0.01,   colors = c(\"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\"),   linetypes = \"solid\",   linesizes = 0.5,   shapes = 19,   fills = \"white\",   theme = function() theme_cowplot(12),   title = NULL )"},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/plot_loss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the loss function — plot_loss","text":"L list element vector loss functions respect number iterations. methods vector length L element name fitting algorithm, \"em\", \"sqp\", \"vi\", \"svi\". sample.rate sampling rate loss function. epsilon small, positive number added vertical axis logarithmic scale -emphasize small differences. colors colors used draw loss curves. linetypes line types used draw loss curves. linesizes line sizes used draw loss curves. shapes shapes used draw points iterations. fills fill colors used draw points iterations. theme ggplot2 theme. title Title plot, \"K = 2\", \"K = 3\".","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/plot_loss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the loss function — plot_loss","text":"ggplot object.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/plot_loss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the loss function — plot_loss","text":"","code":"L <- list(c(-100,-20,-10,-1,-0.5,-0.3,-0.1), c(-30,-5,-1,-0.1,-0.05)) plot_loss(L, c(\"fun\",\"more fun\"), 1)"},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/plot_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the population proportion — plot_structure","title":"Plot the population proportion — plot_structure","text":"Plot population proportion individuals using package ggplot2.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/plot_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the population proportion — plot_structure","text":"","code":"plot_structure(   P,   pops = NULL,   label = NULL,   map.indiv = NULL,   map.pop = NULL,   gap = NULL,   colors = c(\"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\", \"#0072B2\", \"#EE2C2C\", \"#CC79A7\",     \"#8968CD\", \"#FF83FA\", \"#EECFA1\", \"#A52A2A\", \"#4169E1\", \"#FFFF00\", \"#BFEFFF\",     \"#FF1493\"),   font.size = 9,   title = NULL,   subtitle = NULL )"},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/plot_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the population proportion — plot_structure","text":"P proportion matrix. pops Population order options. label original order individuals. option data needs grouped. map.indiv new order individuals. option data needs grouped. map.pop order populations. option data needs grouped. gap Gaps groups. option data needs grouped. colors Theme color options. font.size Font size used plot. title Title plot, \"EM\", \"SQP\", \"VI\", \"SVI\". subtitle Subtitle plot, \"K = 2\", \"K = 3\".","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/plot_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the population proportion — plot_structure","text":"ggplot object.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/plot_structure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the population proportion — plot_structure","text":"","code":"P <- matrix(c(0.5,0.3,0.8, 0.5,0.7,0.2), 3, 2) plot_structure(P, title = \"FUN\")"},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/psd_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the prediction error — psd_error","title":"Compute the prediction error — psd_error","text":"Compute deviance residuals binomial model averaged entries prediction error.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/psd_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the prediction error — psd_error","text":"","code":"psd_error(G, result)"},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/psd_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the prediction error — psd_error","text":"G x J matrix counts; entries G taken {0,1,2}. result Output psd_fit_em, psd_fit_sqp, psd_fit_vi.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/psd_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the prediction error — psd_error","text":"value indicates accuracy prediction.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/psd_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the prediction error — psd_error","text":"","code":"G <- matrix(c(0,0,1, 0,2,1, 1,0,1, 0,1,0, 1,0,0), 3, 5) result <- psd_fit_em(G, 2, 1e-5, 10) psd_error(G, result) #> [1] 0.2512409"},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/psd_fit_em.html","id":null,"dir":"Reference","previous_headings":"","what":"Use EM algorithm to fit PSD model — psd_fit_em","title":"Use EM algorithm to fit PSD model — psd_fit_em","text":"Fit PSD model EM algorithm, use loss function stopping criterion.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/psd_fit_em.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use EM algorithm to fit PSD model — psd_fit_em","text":"","code":"psd_fit_em(G, K, epsilon = 1e-05, maxiter = 500)"},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/psd_fit_em.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use EM algorithm to fit PSD model — psd_fit_em","text":"G x J matrix counts; entries G taken {0,1,2}. K integer 2 greater giving matrix rank. epsilon Convergence criterion. maxiter maximum number iterations.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/psd_fit_em.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use EM algorithm to fit PSD model — psd_fit_em","text":"List following parameters: P population scale matrix individuals. F gene scale matrix populations. Loss vector represents value loss function records 10 iterations. Iterations integer represents number iterations.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/psd_fit_em.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use EM algorithm to fit PSD model — psd_fit_em","text":"","code":"G <- matrix(c(0,0,1, 0,2,1, 1,0,1, 0,1,0, 1,0,0), 3, 5) psd_fit_em(G, 2, 1e-5, 10) #> $P #>           [,1]        [,2] #> [1,] 0.1998095 0.800190535 #> [2,] 0.9982313 0.001768695 #> [3,] 0.3710656 0.628934398 #>  #> $F #>              [,1]       [,2]         [,3]         [,4]         [,5] #> [1,] 1.743626e-05 0.98850783 0.0006827064 3.519872e-01 0.0004500515 #> [2,] 3.373023e-01 0.01534088 0.7128715702 2.940887e-14 0.3631915663 #>  #> $Loss #> [1] -0.7452079 #>  #> $Iterations #> [1] 10 #>"},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/psd_fit_sqp.html","id":null,"dir":"Reference","previous_headings":"","what":"Use SQP algorithm to fit PSD model — psd_fit_sqp","title":"Use SQP algorithm to fit PSD model — psd_fit_sqp","text":"Fit PSD model SQP algorithm, use loss function stopping criterion.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/psd_fit_sqp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use SQP algorithm to fit PSD model — psd_fit_sqp","text":"","code":"psd_fit_sqp(G, K, epsilon = 1e-05, maxiter = 50, initem = 100)"},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/psd_fit_sqp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use SQP algorithm to fit PSD model — psd_fit_sqp","text":"G x J matrix counts; entries G taken {0,1,2}. K integer 2 greater giving matrix rank. epsilon Convergence criterion. maxiter maximum number iterations. initem number iterations using EM algorithm initialization.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/psd_fit_sqp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use SQP algorithm to fit PSD model — psd_fit_sqp","text":"List following parameters: P population scale matrix individuals. F gene scale matrix populations. Loss vector represents value loss function records 10 iterations. Iterations integer represents number iterations.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/psd_fit_sqp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use SQP algorithm to fit PSD model — psd_fit_sqp","text":"","code":"G <- matrix(c(0,0,1, 0,2,1, 1,0,1, 0,1,0, 1,0,0), 3, 5) psd_fit_sqp(G, 2, 1e-5, 10, 10) #> $P #>             [,1]        [,2] #> [1,] 0.000000001 0.999999999 #> [2,] 0.999999999 0.000000001 #> [3,] 0.310823726 0.689176274 #>  #> $F #>             [,1]  [,2]        [,3]        [,4]        [,5] #> [1,] 0.000000001 1e+00 0.000000001 0.413480921 0.000000001 #> [2,] 0.276556043 1e-09 0.573756388 0.000000001 0.311710270 #>  #> $Loss #> [1] -0.7282547 -0.7074246 #>  #> $Iterations #> [1] 20 #>"},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/psd_fit_svi.html","id":null,"dir":"Reference","previous_headings":"","what":"Use SVI algorithm to fit PSD model — psd_fit_svi","title":"Use SVI algorithm to fit PSD model — psd_fit_svi","text":"Fit PSD model SVI algorithm, use loss function stopping criterion.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/psd_fit_svi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use SVI algorithm to fit PSD model — psd_fit_svi","text":"","code":"psd_fit_svi(   G,   K,   epsilon = 1e-05,   maxiter = 5e+05,   val_iter = 10000,   maxdrop = 3,   maxiter.sample = 100,   maxiter.val = 2000,   val_J = 0.05,   val_I = 0.1,   tau = 1,   kappa = 0.5 )"},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/psd_fit_svi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use SVI algorithm to fit PSD model — psd_fit_svi","text":"G x J matrix counts; entries G taken {0,1,2}. K integer 2 greater giving matrix rank. epsilon Convergence criterion. maxiter maximum number iterations. val_iter number iterations validation set sampling. maxdrop maximum number consecutive decreases loss function. Beyond value loop stop. maxiter.sample maximum number iterations sampling section. maxiter.val maximum number iterations validation section. val_J Sample proportion SNPs validation set. val_I Sample proportion individuals validation set. tau parameter descending direction SVI algorithm. kappa parameter descending direction SVI algorithm.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/psd_fit_svi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use SVI algorithm to fit PSD model — psd_fit_svi","text":"List following parameters: P population scale matrix individuals. Loss vector represents value loss function records 10 iterations. MaxLoss Maximum loss function value. Unlike algorithms, observe loss function validation set. Therefore, monotonicity guaranteed, , maximum value necessarily occur end, maximum value needs recorded. Iterations integer represents number iterations.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/psd_fit_svi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use SVI algorithm to fit PSD model — psd_fit_svi","text":"","code":"# Refer to Articles in AwesomePackage."},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/psd_fit_vi.html","id":null,"dir":"Reference","previous_headings":"","what":"Use VI algorithm to fit PSD model — psd_fit_vi","title":"Use VI algorithm to fit PSD model — psd_fit_vi","text":"Fit PSD model VI algorithm, use loss function stopping criterion.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/psd_fit_vi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use VI algorithm to fit PSD model — psd_fit_vi","text":"","code":"psd_fit_vi(G, K, epsilon = 1e-05, maxiter = 500)"},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/psd_fit_vi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use VI algorithm to fit PSD model — psd_fit_vi","text":"G x J matrix counts; entries G taken {0,1,2}. K integer 2 greater giving matrix rank. epsilon Convergence criterion. maxiter maximum number iterations.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/psd_fit_vi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use VI algorithm to fit PSD model — psd_fit_vi","text":"List following parameters: P population scale matrix individuals. F gene scale matrix populations. Loss vector represents value loss function records 10 iterations. Iterations integer represents number iterations.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/psd_fit_vi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use VI algorithm to fit PSD model — psd_fit_vi","text":"","code":"G <- matrix(c(0,0,1, 0,2,1, 1,0,1, 0,1,0, 1,0,0), 3, 5) psd_fit_vi(G, 2, 1e-5, 10) #> $P #>           [,1]      [,2] #> [1,] 0.6904221 0.3095779 #> [2,] 0.2993467 0.7006533 #> [3,] 0.5242797 0.4757203 #>  #> $F #>           [,1]      [,2]      [,3]      [,4]      [,5] #> [1,] 0.3033362 0.3557469 0.4736181 0.2396127 0.3544483 #> [2,] 0.2966189 0.6463663 0.3264726 0.3638131 0.2466314 #>  #> $Loss #> [1] -1.749993 #>  #> $Iterations #> [1] 10 #>"},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/psd_loglikelihood.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the loglikelihood — psd_loglikelihood","title":"Compute the loglikelihood — psd_loglikelihood","text":"Compute maximum loglikelihood function PSD model.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/psd_loglikelihood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the loglikelihood — psd_loglikelihood","text":"","code":"psd_loglikelihood(G, result)"},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/psd_loglikelihood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the loglikelihood — psd_loglikelihood","text":"G x J matrix counts; entries G taken {0,1,2}. result Output psd_fit_em, psd_fit_sqp, psd_fit_vi.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/psd_loglikelihood.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the loglikelihood — psd_loglikelihood","text":"value indicates accuracy prediction.","code":""},{"path":"https://jonathonchow.github.io/AwesomePackage/reference/psd_loglikelihood.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the loglikelihood — psd_loglikelihood","text":"","code":"G <- matrix(c(0,0,1, 0,2,1, 1,0,1, 0,1,0, 1,0,0), 3, 5) result <- psd_fit_em(G, 2, 1e-5, 10) psd_loglikelihood(G, result) #> [1] -0.7385809"}]
